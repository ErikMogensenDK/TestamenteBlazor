@namespace FluentTestamente.Components
@using Models
@using Services;
@inject Services.TestamenteApiClient testamenteApiClient;

<FluentCard Style="max-width: 500px; min-height: 500px; margin: 20px auto; padding: 20px;overflow: visible;">
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
        <FluentLabel Typo="@Typography.H3" Style="text-align: center; margin-bottom: 20px;">
            @Text
        </FluentLabel>

        <FluentTextField @bind-Value="@person.Name" Label="Fulde navn" Required="true" />
        
        <FluentDatePicker @bind-Value="@selectedDate" Label="Fødselsdato" Required="true" />
        
        <FluentTextField @bind-Value="@person.Address" Label="Addresse" Required="true" />
        
        <FluentCheckbox @bind-Value="@person.IsAlive" Label="Nulevende"/>

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
            <FluentButton Appearance="Appearance.Accent" OnClick="CreatePersonAsync">
                Opret person
            </FluentButton>
        </FluentStack>

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
            <FluentButton Appearance="Appearance.Neutral" OnClick="OnFinished">
                Jeg er færdig med at tilføje data
            </FluentButton>
            <FluentButton Appearance="Appearance.Neutral" OnClick="OnCancel">
                Afbryd
            </FluentButton>
        </FluentStack>
    </FluentStack>
</FluentCard>
<div>
    <PeopleListComponent PeopleQueryable=@savedPeopleQueryable>
    </PeopleListComponent>
</div> 


@code {
    private Person person = new();

    [Parameter] public string Text { get; set; }
    [Parameter] public EventCallback OnFinished { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public List<Person> Inheritants {get;set;}
    private List<Person> savedPeople = new();
    private IQueryable<Person?> savedPeopleQueryable;
    private DateTime? selectedDate;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        selectedDate = DateTime.Now.AddYears(-30); 
        await GetPerson();
    }


    private async Task CreatePersonAsync()
    {
        Inheritants.Add(CopyPerson(person));
        savedPeople.Add(CopyPerson(person));
        savedPeopleQueryable = savedPeople.AsQueryable();
        StateHasChanged();
    }
    private Person CopyPerson(Person person)
    {
        Person newPerson = new();
        newPerson.Name = person.Name;
        newPerson.Address = person.Address;
        newPerson.IsAlive= person.IsAlive;
        newPerson.BirthDate = selectedDate;
        //newPerson.DateOnlyBirthDateString = newPerson.BirthDate?.ToString("dd-MM-yyyy");
        return newPerson;
    }
    private async Task GetPerson()
    {
        var myPerson = await testamenteApiClient.PersonGETAsync(new("4FDE8A2D-6411-46F2-B10E-04693F712FE9"));
        Person mappedPerson = MapDtoToPerson(myPerson);
        savedPeople = new(){mappedPerson};
        savedPeopleQueryable = savedPeople.AsQueryable();
        StateHasChanged();
    }
    private Person MapDtoToPerson(PersonQueryDto dto)
    {
        //Person myGuy = new() {Name=dto.Name, Address = dto.Address, BirthDate = new(dto.BirthDate.Year, dto.BirthDate.Month, dto.BirthDate.Day)};
        Person myGuy = new() {Name=dto.Name, Address = dto.Address, BirthDate = dto.BirthDate};
        return myGuy;
    }

}
