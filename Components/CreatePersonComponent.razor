@namespace FluentTestamente.Components
@using Models
@using FluentTestamente.Services;
@using static FluentTestamente.Components.Pages.FamilyTree
@inject UserService userService
@inject TestamenteApiClient testamenteApiClient;

<FluentCard Style="max-width: 500px; min-height: 500px; margin: 20px auto; padding: 20px;overflow: visible;">
    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" VerticalGap="10">
        <FluentLabel Typo="@Typography.H3" Style="text-align: center; margin-bottom: 20px;">
            @Text
        </FluentLabel>

        <FluentTextField @bind-Value="@person.Name" Label="Fulde navn" Required="true" />
        
        <FluentDatePicker @bind-Value="@selectedDate" Label="Fødselsdato" Required="true" />
        
        <FluentTextField @bind-Value="@person.Address" Label="Addresse" Required="true" />
        
        <FluentCheckbox @bind-Value="@person.IsAlive" Label="Nulevende"/>

        <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
            <FluentButton Appearance="Appearance.Accent" OnClick="CreatePersonAsync">
                Opret person
            </FluentButton>
        </FluentStack>

        <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
            <FluentButton Appearance="Appearance.Neutral" OnClick="OnFinished">
                Jeg er færdig med at tilføje data
            </FluentButton>
            <FluentButton Appearance="Appearance.Neutral" OnClick="OnCancel">
                Afbryd
            </FluentButton>
        </FluentStack>
    </FluentStack>
</FluentCard>
<div>
    <PeopleListComponent PeopleQueryable=@savedPeopleQueryable>
    </PeopleListComponent>
</div> 


@code {
    private Person person = new();

    [Parameter] public string Text { get; set; }
    [Parameter] public EventCallback OnFinished { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public List<Person> Inheritants { get; set; }
    [Parameter] public Person User { get; set; }
    [Parameter] public relationToUser RelationToUser{ get; set; }
    private List<Person> savedPeople = new();
    private IQueryable<Person?> savedPeopleQueryable;
    private DateTime? selectedDate = new();

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        selectedDate = DateTime.Now.AddYears(-30); 
        User.Id = await userService.FetchCurrentUserIdAsync();
        await GetPeople();
    }


    private async Task CreatePersonAsync()
    {
        person.Id = Guid.NewGuid();
        person.CreatedById = await userService.FetchCurrentUserIdAsync();
        person = AddBirthDate(person);
        person = AddRelationToUser(person);
        Inheritants.Add(CopyPerson(person));
        savedPeople.Add(CopyPerson(person));
        savedPeopleQueryable = savedPeople.AsQueryable();
        CreatePersonRequest createPersonRequest = GenerateRequest(person);
        //error handling missing
        await testamenteApiClient.PersonPOSTAsync(person.Id, createPersonRequest);
        CreatePersonRequest createUserUpdateRequest = GenerateRequest(User);
        await testamenteApiClient.PersonPUTAsync(User.Id, createUserUpdateRequest);
        StateHasChanged();
    }
    private Person AddBirthDate (Person p)
    {
        DateTime newDate = new();
        if (selectedDate != null)
            newDate = (DateTime)selectedDate;
        p.BirthDate = new(newDate.Year, newDate.Month, newDate.Day);
        return p;
    }
    private CreatePersonRequest GenerateRequest(Person person)
    {
        CreatePersonRequest request = new(){
            Name = person.Name, 
            Address = person.Address,
            BirthDate = new(person.BirthDate.Year, person.BirthDate.Month, person.BirthDate.Day),
            IsAlive = person.IsAlive,
            FatherId = person.FatherId,
            MotherId = person.MotherId,
            SpouseId = person.SpouseId,
            CreatedById = person.CreatedById,
        };
        return request;
    }
    private Person AddRelationToUser(Person person)
    {
        switch(RelationToUser)
        {
            case relationToUser.User:
            {
                person.Id = User.Id;
                User.Name = person.Name;
                User.Address = person.Address;
                User.Address = person.Address;
                User.BirthDate = person.BirthDate;
                User.IsAlive = person.IsAlive;
                User.CreatedById = User.Id;
                break;
            }
            case relationToUser.Child:
            {
                person.FatherId = User.Id;
                break;
            }
            case relationToUser.Father:
            {
                User.FatherId = person.Id;
                break;
            }
            case relationToUser.Mother:
            {
                User.MotherId = person.Id;
                break;
            }
            case relationToUser.Sibling:
            {
                person.FatherId = User.FatherId;
                person.MotherId = User.MotherId;
                break;
            }
            default:
                break;
        }
        return person;
    }
    private Person CopyPerson(Person person)
    {
        Person newPerson = new();
        newPerson.Name = person.Name;
        newPerson.Address = person.Address;
        newPerson.IsAlive= person.IsAlive;
        newPerson.BirthDate = person.BirthDate;//new(newDate.Year, newDate.Month, newDate.Day);
        return newPerson;
    }

    private async Task GetPeople()
    {
        var id = await userService.FetchCurrentUserIdAsync();
        var people= await testamenteApiClient.ByCreatedByAsync(id);
        savedPeople = new();
        foreach (var person in people)
        {
            Person mappedPerson = MapQueryDtoToPerson(person);
            savedPeople.Add(mappedPerson);
        }
        savedPeopleQueryable = savedPeople.AsQueryable();
        StateHasChanged();
    }
    private Person MapQueryDtoToPerson(PersonQueryDto dto)
    {
        Person myGuy = new()
            {
                Id = dto.Id,
                Name = dto.Name,
                Address = dto.Address,
                BirthDate = new(dto.BirthDate.Year, dto.BirthDate.Month, dto.BirthDate.Day),
		        IsAlive = dto.IsAlive,
		        FatherId = dto.FatherId,
                MotherId = dto.MotherId,
                SpouseId = dto.SpouseId,
                CreatedById = User.Id
            };
        return myGuy;
    }

}
