@using Microsoft.FluentUI.AspNetCore.Components
@using FluentTestamente.Services
@using Models
@page "/flow"
@inject NavigationManager NavigationManager
@inject UserService userService
@inject TestamenteApiClient apiClient
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>
@switch (currentState)
{
    case pageState.AskAboutUser:
        <div>
            <div>
                <CreatePersonComponent User="@User" Inheritants="@Inheritants" Text="Angiv dine egne data" RelationToUser= "@relationToUser.User"
                    OnFinished="@(() => {currentState = pageState.AskAboutChildren; StateHasChanged();})"
                    OnCancel="@(() => {currentState = pageState.AskAboutUser; StateHasChanged();})">
                </CreatePersonComponent>
            </div>
        </div>
        break;
    case pageState.AskAboutChildren:
    <div>
        <QuestionComponent 
            Text = "Har du, eller har du haft et eller flere børn?" 
            OnYes = "@(() => {currentState = pageState.AddChildren; StateHasChanged();})"
            OnNo = "@(() => {currentState = pageState.AskAboutSpouse; StateHasChanged();})"
            ></QuestionComponent>
        </div>
        break;
    case pageState.AddChildren:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for barn/børn"
                RelationToUser = "@relationToUser.Child"
                User = "@User"
                OnFinished = "@(() => {currentState = pageState.AskAboutSpouse; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutChildren; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
    case pageState.AskAboutSpouse:
        <div>
        <QuestionComponent 
            Text = "Har du en nulevende ægtefælle?" 
            OnYes = "@(() => {currentState = pageState.AddSpouse; StateHasChanged();})"
            OnNo = "@(() => {currentState = pageState.AddFather; StateHasChanged();})"
            >
        </QuestionComponent>
        </div>
        break;
    case pageState.AddSpouse:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for Ægtefælle"
                RelationToUser = "@relationToUser.Spouse"
                User = "@User"
                OnFinished = "@(() => {currentState = pageState.AddFather; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutSpouse; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
    case pageState.AddFather:
    if (Inheritants.Count > 0)
    {
        currentState=pageState.Finished;
        StateHasChanged();
        break;
    }
// User cannot continue without adding both mother and father, since they will be nescessary for calculating inheritance
// in this case, since there are no first class heirs(i.e.children or spouse)
        <div>
        <QuestionComponent 
            Text = "Tilføj data for din far" 
            OnYes = "@(() => {currentState = pageState.AddMother; StateHasChanged();})"
            OnNo = "@(() => {currentState = pageState.AddFather; StateHasChanged();})"
            >
        </QuestionComponent>
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for din Far"
                RelationToUser = "@relationToUser.Father"
                User = "@User"
                OnFinished = "@(() => {currentState = pageState.AddMother; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AddFather; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        </div>
        break;
    case pageState.AddMother:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for din Mor"
                RelationToUser = "@relationToUser.Mother"
                User = "@User"
                OnFinished = "@(() => {currentState = pageState.AskAboutSiblings; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AddMother; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
    case pageState.AskAboutSiblings:
        <div>
            <QuestionComponent Text="Har du en eller flere biologiske søskende?"
                OnYes="@(() => {currentState = pageState.AddSiblings; StateHasChanged();})"
                OnNo="@(() => {currentState = pageState.AskAboutGrandparents; StateHasChanged();})">
            </QuestionComponent>
        </div>
        break;
    case pageState.AddSiblings:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for biologiske søskende"
                RelationToUser = "@relationToUser.Sibling"
                User = "@User"
                OnFinished = "@(() => {currentState = pageState.Finished; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutSiblings; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;

    //if any inheritants have been added at this point, grandparents are irrelevant!
    @* case pageState.AskAboutGrandparents:
    if (Inheritants.Count > 0)
    {
        currentState=pageState.Finished;
        StateHasChanged();
        break;
    }
        <div>
        <div>
            <QuestionComponent Text="Har du en eller flere levende biologiske bedsteforældre?"
                OnYes="@(() => {currentState = pageState.AddGrandparents; StateHasChanged();})"
                OnNo="@(() => {currentState = pageState.Finished; StateHasChanged();})">
            </QuestionComponent>
        </div>
        </div>
        break;
    case pageState.AddGrandparents:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for biologiske søskende"
                OnFinished = "@(() => {currentState = pageState.Finished; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutGrandparents; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break; *@
    case pageState.Finished:
        <div>
            <FluentCard Style="max-width: 500px; min-height: 300px; margin: 20px auto; padding: 20px;overflow: visible;">

            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" VerticalGap="10">

            <FluentLabel Typo="@Typography.H3" Style="text-align: center; margin-bottom: 20px;">
                Alle arvinger er blevet tilføjet!
                Tryk på knappen nedenfor, for at se fordeling af arv.
            </FluentLabel>

            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center"> 
                <FluentButton Appearance="Appearance.Accent" OnClick="@(() => NavigationManager.NavigateTo("/fordeling"))">
                    Gå til arvefordeling!
                </FluentButton>
            </FluentStack>

            </FluentStack>
            </FluentCard>
        </div>
        break;
}

@code {
    private string createPersonTitle = "";
    private pageState currentState = pageState.AskAboutUser;
    public enum pageState
    {
        AskAboutUser, AskAboutChildren, AddChildren, AskAboutSpouse, AddSpouse, 
        AddMother, AddFather, AskAboutSiblings, AddSiblings, AskAboutGrandparents, AddGrandparents, Finished
    }
    public enum relationToUser
    {
        User, Child, Father, Mother, Spouse, Sibling,
        MothersFather, MothersMother, FathersMother, FathersFather
    }
    public pageState state { get; set; }

    [Parameter]
    public List<Person> Inheritants { get; set; } = new();

    [Parameter]
    public Person User { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        Guid id = await userService.FetchCurrentUserIdAsync();
        if (id == Guid.Empty)
        {
            userService.CurrentUserId = Guid.NewGuid();
            User = new(){Id = userService.CurrentUserId};
        }
    }


    protected override void OnParametersSet()
    {
        currentState = state;
        @* NavigationManager.NavigateTo($"/flow/{state}", false); *@
        @* if (currentStep < 1 || currentStep > lastStep)
        {
            currentStep = 1;
            NavigationManager.NavigateTo("/flow/AskAboutChildren", false);
        } *@
    }


}
