@using Components
@using Models
@page "/flow"
@* @page "/flow/{State:pageState}" *@
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>
@switch (currentState)
{
    case pageState.AskAboutChildren:
    <div>
        <QuestionComponent 
            Text = "Har du, eller har du haft et eller flere børn?" 
            OnYes = "@(() => {currentState = pageState.AddChildren; StateHasChanged();})"
            OnNo = "@(() => {currentState = pageState.AskAboutSpouse; StateHasChanged();})"
            ></QuestionComponent>
        </div>
        break;
    case pageState.AddChildren:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for barn/børn"
                OnFinished = "@(() => {currentState = pageState.AskAboutSpouse; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutChildren; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
    case pageState.AskAboutSpouse:
        <div>
        <QuestionComponent 
            Text = "Har du en nulevende ægtefælle?" 
            OnYes = "@(() => {currentState = pageState.AddSpouse; StateHasChanged();})"
            OnNo = "@(() => {currentState = pageState.AskAboutParents; StateHasChanged();})"
            >
        </QuestionComponent>
        </div>
        break;
    case pageState.AddSpouse:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for Ægtefælle"
                OnFinished = "@(() => {currentState = pageState.AskAboutParents; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutSpouse; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
        // check for spouse children - in which case parents/siblings are irrelevent.
    case pageState.AskAboutParents:
        <div>
        <QuestionComponent 
            Text = "Har du en eller flere levende forældre?" 
            OnYes = "@(() => {currentState = pageState.AddParents; StateHasChanged();})"
            OnNo = "@(() => {currentState = pageState.AskAboutSiblings; StateHasChanged();})"
            >
        </QuestionComponent>
        </div>
        break;
    case pageState.AddParents:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for Forældre"
                OnFinished = "@(() => {currentState = pageState.AskAboutSiblings; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutParents; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
    case pageState.AskAboutSiblings:
        <div>
            <QuestionComponent Text="Har du en eller flere levende biologiske søskende?"
                OnYes="@(() => {currentState = pageState.AddSiblings; StateHasChanged();})"
                OnNo="@(() => {currentState = pageState.AskAboutGrandparents; StateHasChanged();})">
            </QuestionComponent>
        </div>
        break;
    case pageState.AddSiblings:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for biologiske søskende"
                OnFinished = "@(() => {currentState = pageState.AskAboutGrandparents; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutSiblings; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
    case pageState.AskAboutGrandparents:
        <div>
        <div>
            <QuestionComponent Text="Har du en eller flere levende biologiske bedsteforældre?"
                OnYes="@(() => {currentState = pageState.AddGrandparents; StateHasChanged();})"
                OnNo="@(() => {currentState = pageState.Finished; StateHasChanged();})">
            </QuestionComponent>
        </div>
        </div>
        break;
    case pageState.AddGrandparents:
        <div>
            <CreatePersonComponent 
                Inheritants = "@Inheritants"
                Text = "Angiv data for biologiske søskende"
                OnFinished = "@(() => {currentState = pageState.Finished; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutGrandparents; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
    case pageState.Finished:
        <div>
            <span>Alle arvinger er blevet tilføjet!</span>
            <span>Tryk på knappen nedenfor, for at se fordeling af arv!</span>
            <FluentButton>Gå til arvefordeling!</FluentButton>
        </div>
        break;
}

@code {
    private int currentStep = 1;
    private const int lastStep = 4;
    private string createPersonTitle = "";
    private pageState currentState = pageState.AskAboutChildren;
    public enum pageState { AskAboutChildren, AddChildren, AskAboutSpouse, AddSpouse, AskAboutParents, AddParents, AskAboutSiblings, AddSiblings, AskAboutGrandparents, AddGrandparents, Finished}
    public pageState state { get; set; }

    [Parameter]
    public List<Person> Inheritants { get; set; } = new();


    protected override void OnParametersSet()
    {
        currentState = state;
        @* NavigationManager.NavigateTo($"/flow/{state}", false); *@
        @* if (currentStep < 1 || currentStep > lastStep)
        {
            currentStep = 1;
            NavigationManager.NavigateTo("/flow/AskAboutChildren", false);
        } *@
    }

    private void NextStep()
    {
        //currentState = pageState.Parse((pageState)((int)currentState + 1))
        //currentStep++;
        currentState = pageState.AskAboutSpouse;
        StateHasChanged();
        //UpdateUrl();
    }

    private void UpdateUrl()
    {
        NavigationManager.NavigateTo($"/flow/{currentStep}", false);
    }

}
