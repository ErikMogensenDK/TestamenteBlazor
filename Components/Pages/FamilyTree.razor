@using Components
@page "/flow"
@* @page "/flow/{State:pageState}" *@
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>
@switch (currentState)
{
    case pageState.AskAboutChildren:
    <div>
        <Step1 OnNext="@(() => NextStep())" />
        <QuestionComponent 
            Text = "Har du, eller har du haft børn?" 
            OnYes = "@(() => {currentState = pageState.AddChildren; StateHasChanged();})"
            OnNo = "@(() => {currentState = pageState.AskAboutPartner; StateHasChanged();})"
            ></QuestionComponent>
        </div>
        break;
    case pageState.AddChildren:
        <div>
            <Step1 OnNext="@(() => NextStep())" />
            <CreatePersonComponent 
                Text = "Angiv data for barn!"
                OnFinished = "@(() => {currentState = pageState.AskAboutPartner; StateHasChanged();})"
                OnCancel = "@(() => {currentState = pageState.AskAboutChildren; StateHasChanged();})">
            </CreatePersonComponent>
        </div>
        break;
    case pageState.AskAboutPartner:
        <Step2 OnNext="@(() => NextStep())" OnPrevious="@(() => PreviousStep())" />
        <div>
            <h2>Step 1</h2>
            <p>This is the content for step 2</p>
            <button @onclick="PreviousStep">Previous</button>
            <button @onclick="NextStep">Next</button>
        </div>
        break;
    case pageState.AddPartner:
        <Step3 OnPrevious="@(() => PreviousStep())" OnComplete="@(() => Complete())" />
        break;
}

@code {
    private int currentStep = 1;
    private const int lastStep = 4;
    private string createPersonTitle = "";
    private pageState currentState = pageState.AskAboutChildren;
    public enum pageState { AskAboutChildren, AddChildren, AskAboutPartner, AddPartner }
    [Parameter]
    public pageState state { get; set; }

    protected override void OnParametersSet()
    {
        currentState = state;
        @* NavigationManager.NavigateTo($"/flow/{state}", false); *@
        @* if (currentStep < 1 || currentStep > lastStep)
        {
            currentStep = 1;
            NavigationManager.NavigateTo("/flow/AskAboutChildren", false);
        } *@
    }

    private void NextStep()
    {
        //currentState = pageState.Parse((pageState)((int)currentState + 1))
        //currentStep++;
        currentState = pageState.AskAboutPartner;
        StateHasChanged();
        //UpdateUrl();
    }

    private void PreviousStep()
    {
        //currentState = (pageState)((int)currentState - 1)
        UpdateUrl();
    }

    private void UpdateUrl()
    {
        NavigationManager.NavigateTo($"/flow/{currentStep}", false);
    }

    private void Complete()
    {
        // Handle flow completion
    }

    @* private List<Node> GetNodes()
        {
            Node node = new();

        } *@
}
